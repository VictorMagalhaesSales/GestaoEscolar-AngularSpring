==========--------------------------==========
= ESCOLA FULLSTACK - FrontEnd Angular =
==========--------------------------==========


• Template e outros
(x) Adaptando template
(x) Início
( ) Imagem no BD
( ) Mascaras nos input's

•===--- Alunos ---===•
 (x) Listar alunos
 (X) Adicionar alunos
 (x) Editar alunos
 (x) Deletar alunos


•===--- Professor ---===•
 (X) Listar professores
 (x) Adicionar professores
 (x) Editar professores
 (x) Deletar professores


•===--- Perfil ---===•
 (x) Perfil aluno
 (x) Perfil professor


•===--- Faltas ---===•
 (x) Listar faltas
 (x) Deletar faltas


•===--- Notas ---===•
 (x) Adicionar notas
 (x) Listar notas
 (x) Editar notas
 (x) Deletar notas


•===--- Roteamento ---===•
 (x) Página não encontrada


•===--- Login permissões ---===•
 (x) Autenticar login
 (x) Manter usuário logado
 (x) Permissões
 (x) Mensagens de permissões
 (x) Componentes visualizados com permissões
 (x) Perfil professor automático
 (x) Perfil aluno automático
 (x) Notas e faltas automático
 (x) Professor e master conseguem editar notas
 ( ) Atualizar o acess token
 ( ) Proteção com CanActivate
 ( ) Logout

•===--- Tratamento de erros ---===•
 ( ) Dados(email) duplicados
 ( ) Validações no formulário
 ( ) Erros com mensagens padrão
















---------------------------------------------------------- RESUMO DO PROJETO ----------------------------------------------------------
0===--- BackEnd---===0
• Segurança e autenticação: 
Para segurança e autenticação, utilizei o protoloco Oauth2, que possui Authorization Server que me envia o token de acessso, no caso o acess token que expira com 20 segundos, por questões de segurança, e o refresh token que atualiza sempre esse meu acess token. O Refresh token é passado via cookie, para melhorar a segurança. A partir dai ele faz a autenticação pelo BD;
• Tratamento de erros:
Além do bean validator que controla o not null, size, manda mensagem bonitinha e etc, eu utilizei o exceptionhandler pra pegar minhas exceções e deixar elas padronizadas;
• CRUDS:
Temos o crud de usuários, com paginação e filtro, bem como com os professores, temos o crud de notas e faltas também;

0===--- FrontEnd---===0
• Permissões:
 O projeto possui um sistema de autenticação, onde você pode logar como adm, professor ou aluno, ambos com funcionalidades diferentes.
   - ADM: pode listar alunos, editá-los e adicioná-los; pode listar professores, editá-los e adicioná-los; pode listar notas e faltas e editá-las.
   - Professor: pode listar aluno, editá-los e adicioná-los; pode listar professores; pode listar notas e faltas e editá-las; pode visualizar e editar seu  perfil;
   - Aluno: pode listar professores; pode listar suas notas e faltas; pode visualizar e editar seu perfil;
• Erros:
Estamos trantando o erro com mensagens na tela. Se você tentar entrar em uma página cujas funções você não tem acesso, aparecerá uma mensagem de erro.
• Autenticação:
Funciona via token, que é recebebido pela função post, pegando-o e jogando-o em uma variável Payload que será utilizada na aplicação para obtenção de dados. O token também é armazenado no LocalStore.



